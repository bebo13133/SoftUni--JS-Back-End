{"version":3,"file":"lite-html.js","sources":["src/lib/markers.js","src/lib/parts.js","src/lib/node-walker.js","src/lib/template-parser.js","src/lib/templates.js","src/lite-html.js"],"sourcesContent":["/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport const marker = Math.random()\n  .toString(36)\n  .slice(2)\n  .padStart(10, '0');\nexport const attributeMarker = `font-family:${marker}`;\nexport const IEStyleMarker = `font-family: ${marker};`;\nexport const commentMarker = `comment-${marker}`;\nexport const failMarker = `node-${marker}`;\nexport const nodeMarker = `${failMarker}\" ${failMarker} `;\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { TemplateResult, TemplateInstance } from './templates.js';\n\nexport const isSerializable = value => typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';\nexport const isIterable = nonPrimitive => Array.isArray(nonPrimitive) || nonPrimitive[Symbol.iterator];\n\n// A flag that signals that no render should happen\nexport const noChange = {};\n\n// A node type for empty parts\nconst emptyNode = {};\n// A node type for parts that contain an iterable\nconst iterableNode = {};\n\nexport class NodePart {\n  // node OR parent _must_ be defined\n  // If a node is defined, this NodePart represents the position of that node in the tree\n  // If a only a parent is defined, this NodePart represents the content of the parent\n  constructor({ node, parent, before, after }) {\n    this.node = node || emptyNode;\n    this.value = noChange;\n\n    this.parentNode = parent || (node && node.parentNode);\n    this.beforeNode = before || (node && node.previousSibling);\n    this.afterNode = after || (node && node.nextSibling);\n  }\n\n  render(value) {\n    if (value === noChange) {\n      return;\n    }\n    if (value == null) {\n      this.clear();\n    } else if (isSerializable(value)) {\n      this._renderText(value);\n    } else if (value instanceof TemplateResult) {\n      this._renderTemplateResult(value);\n    } else if (isIterable(value)) {\n      this._renderIterable(value);\n    } else if (value instanceof Node) {\n      this._renderNode(value);\n    } else if (value.then !== undefined) {\n      this._renderPromise(value);\n    } else {\n      value = String(value);\n      this._renderText(value);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Render a serializable value in this part\n   *\n   * Strings, Numbers, and Booleans are serializable\n   * Serializable values are rendered as textContent of a TextNode\n   */\n  _renderText(serializable) {\n    // If the text is not equal to the previously rendered value\n    if (this.value !== serializable) {\n      // If the node is a TextNode, replace the content of that node\n      // Otherwise, create a new TextNode with the primitive value as content\n      if (this.node.nodeType === 3) {\n        this.node.textContent = serializable;\n      } else {\n        this._renderNode(document.createTextNode(serializable));\n      }\n    }\n  }\n\n  /**\n   * Render a TemplateResult in this part\n   *\n   * Checks if this template has already been rendered in this part before.\n   * If so, re-use that TemplateInstance\n   * If not, create a new TemplateInstance\n   */\n  _renderTemplateResult(templateResult) {\n    this.templateInstances = this.templateInstances || new Map();\n    let instance = this.templateInstances.get(templateResult.template);\n    if (!instance) {\n      instance = new TemplateInstance(templateResult.template, this.parentNode, this.beforeNode, this.afterNode);\n      this.templateInstances.set(templateResult.template, instance);\n    }\n    if (this.node !== instance.fragment) {\n      this.clear();\n      this.parentNode.insertBefore(instance.fragment, this.afterNode);\n      this.node = instance.fragment;\n    }\n    instance.render(templateResult.values);\n  }\n\n  /**\n   * Render an iterable in this part\n   *\n   * Creates a part for each item in the iterable\n   * Render each iterable value in a part\n   */\n  _renderIterable(iterable) {\n    if (this.node !== iterableNode) {\n      this.clear();\n      this.node = iterableNode;\n      if (!this.iterableParts) {\n        this.iterableParts = [];\n      } else {\n        this.iterableParts.length = 0;\n      }\n    }\n\n    // if (this.iterableParts.length < iterable.length) {\n    //   let after;\n    //   let before = this.afterNode ? this.afterNode.previousSibling : this.parentNode.lastChild;\n    //   const parent = this.parentNode;\n    //   do {\n    //     after = document.createTextNode('');\n    //     this.parentNode.insertBefore(after, this.afterNode);\n    //     this.iterableParts.push(new NodePart({ before, after, parent }));\n    //     before = after;\n    //   } while (this.iterableParts.length < iterable.length);\n    // } else if (this.iterableParts.length > iterable.length) {\n    //   const nodeToRemove = this.iterableParts[iterable.length].beforeNode.nextSibling;\n    //   moveNodes(this.parentNode, nodeToRemove, this.afterNode);\n    //   this.iterableParts.length = iterable.length;\n    // }\n\n    let index = 0;\n    let before = this.afterNode ? this.afterNode.previousSibling : this.parentNode.lastChild;\n    let after;\n    const parent = this.parentNode;\n    for (const value of iterable) {\n      let part = this.iterableParts[index];\n      if (part === undefined) {\n        after = document.createTextNode('');\n        this.parentNode.insertBefore(after, this.afterNode);\n        part = new NodePart({ before, after, parent });\n        this.iterableParts.push(part);\n        before = after;\n      }\n      part.render(value);\n      index++;\n    }\n    if (index === 0) {\n      moveNodes(this.parentNode, this.beforeNode, this.afterNode);\n    } else if (index < this.iterableParts.length) {\n      const lastPart = this.iterableParts[index - 1];\n      moveNodes(this.parentNode, lastPart.afterNode, this.afterNode);\n    }\n    this.iterableParts.length = index;\n  }\n\n  /**\n   * Render a DOM node in this part\n   */\n  _renderNode(node) {\n    // If we are not already rendering this node\n    if (this.node !== node) {\n      this.clear();\n      this.parentNode.insertBefore(node, this.afterNode);\n      this.node = node;\n    }\n  }\n\n  /**\n   * Render the result of a promise in this part\n   */\n  _renderPromise(promise) {\n    // If the promise is not the last value or promise\n    if (this.value !== promise && this.promise !== promise) {\n      this.clear();\n      this.promise = promise;\n      this.value = promise;\n      // When the promise resolves, render the result of that promise\n      promise.then(value => {\n        // Render the promise result only if the last rendered value was the promise\n        if (this.value === promise) {\n          this.render(value);\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear out the content of this NodePart\n   *\n   * If the current content is part of a DocumentFragment (it is the result of a TemplateResult or an Array)\n   * The current content is moved back into that fragment to be used again if the same fragment is rendered\n   * Otherwise, the current content is removed from the DOM permanently\n   */\n  clear() {\n    moveNodes(this.parentNode, this.beforeNode, this.afterNode, this.node);\n    this.node = emptyNode;\n  }\n}\n\nconst moveNodes = (parent, before, after, target) => {\n  let nodeToRemove;\n  if (before == undefined) {\n    nodeToRemove = parent.firstChild;\n  } else {\n    nodeToRemove = before && before.nextSibling;\n  }\n  if (nodeToRemove !== null) {\n    nodeToRemove = nodeToRemove || parent.firstChild;\n    let remove;\n    let nextNode;\n    if (target instanceof DocumentFragment) {\n      remove = () => target.appendChild(nodeToRemove);\n    } else {\n      remove = () => parent.removeChild(nodeToRemove);\n    }\n\n    while (nodeToRemove != after) {\n      nextNode = nodeToRemove.nextSibling;\n      remove();\n      nodeToRemove = nextNode;\n    }\n  }\n};\n\n// The node in the CommentPart constructor must be a CommentNode\nexport class CommentPart {\n  constructor({ node }) {\n    this.node = node;\n  }\n\n  render(value) {\n    this.node.textContent = value;\n  }\n}\n\nexport class AttributePart {\n  constructor({ node, attribute }) {\n    this.node = node;\n    switch (attribute[0]) {\n      case '.':\n        this.render = this._renderProperty;\n      case '?':\n        this.render = this.render || this._renderBoolean;\n      case '@':\n        this.render = this.render || this._renderEvent;\n        this.node.removeAttribute(attribute);\n        this.name = attribute.slice(1);\n        break;\n      default:\n        this.render = this._renderAttribute;\n        this.name = attribute;\n    }\n  }\n\n  _renderProperty(value) {\n    this.node[this.name] = value;\n  }\n\n  _renderBoolean(boolean) {\n    if (this.value !== !!boolean) {\n      boolean ? this.node.setAttribute(this.name, '') : this.node.removeAttribute(this.name);\n      this.value = boolean;\n    }\n  }\n\n  _renderEvent(listener) {\n    if (this.value !== listener) {\n      this.node.removeEventListener(this.name, this.value);\n      this.node.addEventListener(this.name, listener);\n      this.value = listener;\n    }\n  }\n\n  _renderAttribute(string) {\n    if (string !== this.value) {\n      this.node.setAttribute(this.name, string);\n      this.value = string;\n    }\n  }\n}\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { IEStyleMarker, attributeMarker, commentMarker, nodeMarker, failMarker } from './markers.js';\nimport { AttributePart, CommentPart, NodePart } from './parts.js';\n\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=$/;\nconst filter = [].filter;\n\nexport const findParts = (strings, template) => {\n  let parts = [];\n\n  // Recursive depth-first tree traversal that finds nodes in the subtree of `node` that are parts\n  // The path is an array of incides of childNodes to get to this node\n  const recursiveSearch = (node, path) => {\n    // If the node is a CommentNode, check if it is a marker for a CommentPart or NodePart\n    if (node.nodeType === 8) {\n      if (node.nodeValue === commentMarker) {\n        parts.push({ type: CommentPart, path });\n      } else if (node.nodeValue === nodeMarker) {\n        parts.push({ type: NodePart, path });\n      }\n      // If it is not a marker for a Part, it is a regular comment\n    } else {\n      // If the node is an ElementNode, it may contain AttributeParts\n      if (node.nodeType === 1) {\n        // If the node has the failMarker, the context was incorrectly recognised as a Node context\n        // This happens when an attribute literal contains the '>' character\n        // There is no way to fix this, so throw an error to alert the developer to fix it\n        if (node.hasAttribute(failMarker)) {\n          throw new Error(\"The '>' character is not allowed in attribute literals. Replace with '&gt;'\");\n        }\n        // If the node has any AttributeParts, it will have the attributeMarker attribute set\n        if (node.hasAttribute(attributeMarker)) {\n          node.removeAttribute(attributeMarker);\n\n          // Find the number of dynamic attributes by checking all attribute values against the attributeMarker\n          let dynamicAttributes = filter.call(node.attributes, attribute => attribute.value === attributeMarker).length;\n\n          // If the node has the 'style' attribute, test against IEStyleMarker to check if the attribute is dynamic\n          if (node.getAttribute('style') === IEStyleMarker) {\n            dynamicAttributes += 1;\n          }\n\n          for (let i = 0; i < dynamicAttributes; i++) {\n            // Find the name of this AttributePart using the lastAttributeNameRegex on the string before this part\n            const attribute = lastAttributeNameRegex.exec(strings[parts.length])[1];\n            parts.push({ type: AttributePart, path, attribute });\n          }\n        }\n      }\n\n      // Recursively search all children of this node\n      const children = node.childNodes;\n      const length = children.length;\n      for (let i = 0; i < length; i++) {\n        recursiveSearch(children[i], path.concat([i]));\n      }\n    }\n  };\n\n  // Recursively search the content of the template for parts\n  recursiveSearch(template.content, []);\n\n  // If we found less parts than we should, something went wrong\n  // Most likely a double attribute assignment was dropped by the HTML parser\n  // Throw an error and warn the developer\n  if (parts.length < strings.length - 1) {\n    throw new Error(\"Double attribute assignments are not allowed: '<div a=${0} a=${0}>'\");\n  }\n  return parts;\n};\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { attributeMarker, commentMarker, nodeMarker } from './markers.js';\n\n// The second marker is to add a boolean attribute to the element\n// This is to easily test if a node has dynamic attributes by checking against that attribute\nexport const attributeMarkerTag = `${attributeMarker} ${attributeMarker}`;\n\n// The space at the end is necessary, to avoid accidentally closing comments with `<!-->`\nexport const commentMarkerTag = `--><!--${commentMarker}--><!-- `;\n\n// The extra content at the end is to add a flag to an element when\n// a nodeMarkerTag is inserted as an attribute due to an attribute containing `>`\nexport const nodeMarkerTag = `<!--${nodeMarker}-->`;\n\nexport const attributeContext = Symbol('attributeContext');\nexport const commentContext = Symbol('commentContext');\nexport const nodeContext = Symbol('nodeContext');\nexport const unchangedContext = Symbol('unchangedContext');\n\nconst contextMap = new Map();\ncontextMap.set(attributeContext, attributeMarkerTag);\ncontextMap.set(commentContext, commentMarkerTag);\ncontextMap.set(nodeContext, nodeMarkerTag);\n\nexport const parseContext = string => {\n  const openComment = string.lastIndexOf('<!--');\n  const closeComment = string.indexOf('-->', openComment + 1);\n  const commentClosed = closeComment > -1;\n  let type;\n  if (openComment > -1 && !commentClosed) {\n    type = commentContext;\n  } else {\n    const closeTag = string.lastIndexOf('>');\n    const openTag = string.indexOf('<', closeTag + 1);\n    if (openTag > -1) {\n      type = attributeContext;\n    } else {\n      if (closeTag > -1) {\n        type = nodeContext;\n      } else {\n        type = unchangedContext;\n      }\n    }\n  }\n  return { commentClosed, type };\n};\n\nexport const parseTemplate = strings => {\n  const html = [];\n  const lastStringIndex = strings.length - 1;\n  let currentContext = nodeContext;\n  for (let i = 0; i < lastStringIndex; i++) {\n    const string = strings[i];\n    const context = parseContext(string);\n    if ((currentContext !== commentContext || context.commentClosed) && context.type !== unchangedContext) {\n      currentContext = context.type;\n    }\n    if (currentContext === attributeContext && string.slice(-1) !== '=') {\n      throw new Error('Only bare attribute parts are allowed: `<div a=${0}>`');\n    }\n    html.push(string);\n    html.push(contextMap.get(currentContext));\n  }\n\n  html.push(strings[lastStringIndex]);\n  return html.join('');\n};\n\nexport const buildTemplate = strings => {\n  const template = document.createElement('template');\n  template.innerHTML = parseTemplate(strings);\n  return template;\n};\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { findParts } from './node-walker.js';\nimport { buildTemplate } from './template-parser.js';\nimport { NodePart } from './parts.js';\n/**\n * A map that contains all the template literals we have seen before\n * It maps from a String array to a Template object\n *\n * @typedef {Map.<[String], Template>}\n */\nconst templateMap = new Map();\n\n/**\n * Template holds the DocumentFragment that is to be used as a prototype for instances of this template\n * When a template is to be rendered in a new location, a clone will be made from this\n *\n * @prop {[String]} strings\n *   The unique string array that this template represents\n * @prop {[DocumentFragment]} element\n *   The DocumentFragment that can be cloned to make instances of this template\n * @prop {[Object]} parts\n *   The descriptions of the parts in this Template. Each part has a path which defines a unique location in the\n *   template DOM tree, a type which defines the part type, and an optional attribute which defines the name of\n *   the attribute this part represents.\n */\nexport class Template {\n  constructor(strings) {\n    this.strings = strings;\n    this.element = buildTemplate(strings);\n    this.parts = findParts(strings, this.element);\n  }\n}\n\n/**\n * TemplateResult holds the strings and values that result from a tagged template string literal.\n * TemplateResult can find and return a unique Template object that represents its tagged template string literal.\n */\nexport class TemplateResult {\n  constructor(strings, values) {\n    this.strings = strings;\n    this.values = values;\n    this._template = undefined;\n  }\n\n  /**\n   * @returns {Template}\n   *   A unique Template object..\n   *   Each evaluation of html`..` yields a new TemplateResult object, but they will have the same\n   *   Template object when they are the result of the same html`..` literal.\n   *\n   */\n  get template() {\n    if (this._template) {\n      return this._template;\n    }\n    let template = templateMap.get(this.strings);\n    if (!template) {\n      template = new Template(this.strings);\n      templateMap.set(this.strings, template);\n    }\n    this._template = template;\n    return template;\n  }\n}\n\n/**\n * An instance of a template that can be rendered somewhere\n *\n * @prop {Template} template\n *   The unique Template object that this is an instance of\n * @prop {[DocumentFragment]} fragment\n *   The DocumentFragment that is a clone of the Template's prototype DocumentFragment\n * @prop {[AttributePart|CommentPart|NodePart|]} parts\n *   The parts that render into this template instance\n */\nexport class TemplateInstance {\n  constructor(template, parent, before, after) {\n    this.template = template;\n    this.fragment = template.element.content.cloneNode(true);\n\n    // Create new Parts based on the part definitions set on the Template\n    const parts = this.template.parts.map(part => {\n      let node = this.fragment;\n      part.path.forEach(nodeIndex => {\n        node = node.childNodes[nodeIndex];\n      });\n      part.node = node;\n      if (part.type === NodePart) {\n        if (part.path.length === 1) {\n          part.parent = parent;\n          part.before = node.previousSibling || before;\n          part.after = node.nextSibling || after;\n        } else {\n          part.parent = node.parentNode;\n        }\n      }\n      return part;\n    });\n    this.parts = parts.map(part => new part.type(part));\n  }\n\n  /**\n   * Render values into the parts of this TemplateInstance\n   *\n   * @param {[any]} values\n   *   An array of values to render into the parts. There should be one value per part\n   */\n  render(values) {\n    this.parts.map((part, index) => part.render(values[index]));\n  }\n}\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { TemplateResult } from './lib/templates.js';\nimport { NodePart } from './lib/parts.js';\n\nexport { noChange } from './lib/parts.js';\n\n/**\n * Tagging function to tag JavaScript template string literals as HTML\n *\n * @return {TemplateResult}\n *   The strings and values of the template string wrapped in a TemplateResult object\n */\nexport const html = (strings, ...values) => {\n  return new TemplateResult(strings, values);\n};\n\n/**\n * Render content into a target node\n *\n * @param {any} content\n *   Any content you wish to render. Usually a template string literal tagged with the `html` function\n * @param {Node} target\n *   An HTML Node that you wish to render the content into.\n *   The content will become the sole content of the target node.\n */\nexport const render = (content, target) => {\n  // Check if the target has a NodePart that represents its content\n  let part = target.__nodePart;\n  if (!part) {\n    // If it does not, create a new NodePart\n    part = new NodePart({ parent: target });\n    target.__nodePart = part;\n  }\n  // Task the NodePart of this target to render the content\n  part.render(content);\n};\n"],"names":[],"mappings":"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"}