{"version":3,"file":"lite-html.min.js","sources":["src/lib/markers.js","src/lib/parts.js","src/lib/node-walker.js","src/lib/template-parser.js","src/lib/templates.js","src/lite-html.js"],"sourcesContent":["/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport const marker = Math.random()\n  .toString(36)\n  .slice(2)\n  .padStart(10, '0');\nexport const attributeMarker = `font-family:${marker}`;\nexport const IEStyleMarker = `font-family: ${marker};`;\nexport const commentMarker = `comment-${marker}`;\nexport const failMarker = `node-${marker}`;\nexport const nodeMarker = `${failMarker}\" ${failMarker} `;\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { TemplateResult, TemplateInstance } from './templates.js';\n\nexport const isSerializable = value => typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';\nexport const isIterable = nonPrimitive => Array.isArray(nonPrimitive) || nonPrimitive[Symbol.iterator];\n\n// A flag that signals that no render should happen\nexport const noChange = {};\n\n// A node type for empty parts\nconst emptyNode = {};\n// A node type for parts that contain an iterable\nconst iterableNode = {};\n\nexport class NodePart {\n  // node OR parent _must_ be defined\n  // If a node is defined, this NodePart represents the position of that node in the tree\n  // If a only a parent is defined, this NodePart represents the content of the parent\n  constructor({ node, parent, before, after }) {\n    this.node = node || emptyNode;\n    this.value = noChange;\n\n    this.parentNode = parent || (node && node.parentNode);\n    this.beforeNode = before || (node && node.previousSibling);\n    this.afterNode = after || (node && node.nextSibling);\n  }\n\n  render(value) {\n    if (value === noChange) {\n      return;\n    }\n    if (value == null) {\n      this.clear();\n    } else if (isSerializable(value)) {\n      this._renderText(value);\n    } else if (value instanceof TemplateResult) {\n      this._renderTemplateResult(value);\n    } else if (isIterable(value)) {\n      this._renderIterable(value);\n    } else if (value instanceof Node) {\n      this._renderNode(value);\n    } else if (value.then !== undefined) {\n      this._renderPromise(value);\n    } else {\n      value = String(value);\n      this._renderText(value);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Render a serializable value in this part\n   *\n   * Strings, Numbers, and Booleans are serializable\n   * Serializable values are rendered as textContent of a TextNode\n   */\n  _renderText(serializable) {\n    // If the text is not equal to the previously rendered value\n    if (this.value !== serializable) {\n      // If the node is a TextNode, replace the content of that node\n      // Otherwise, create a new TextNode with the primitive value as content\n      if (this.node.nodeType === 3) {\n        this.node.textContent = serializable;\n      } else {\n        this._renderNode(document.createTextNode(serializable));\n      }\n    }\n  }\n\n  /**\n   * Render a TemplateResult in this part\n   *\n   * Checks if this template has already been rendered in this part before.\n   * If so, re-use that TemplateInstance\n   * If not, create a new TemplateInstance\n   */\n  _renderTemplateResult(templateResult) {\n    this.templateInstances = this.templateInstances || new Map();\n    let instance = this.templateInstances.get(templateResult.template);\n    if (!instance) {\n      instance = new TemplateInstance(templateResult.template, this.parentNode, this.beforeNode, this.afterNode);\n      this.templateInstances.set(templateResult.template, instance);\n    }\n    if (this.node !== instance.fragment) {\n      this.clear();\n      this.parentNode.insertBefore(instance.fragment, this.afterNode);\n      this.node = instance.fragment;\n    }\n    instance.render(templateResult.values);\n  }\n\n  /**\n   * Render an iterable in this part\n   *\n   * Creates a part for each item in the iterable\n   * Render each iterable value in a part\n   */\n  _renderIterable(iterable) {\n    if (this.node !== iterableNode) {\n      this.clear();\n      this.node = iterableNode;\n      if (!this.iterableParts) {\n        this.iterableParts = [];\n      } else {\n        this.iterableParts.length = 0;\n      }\n    }\n\n    // if (this.iterableParts.length < iterable.length) {\n    //   let after;\n    //   let before = this.afterNode ? this.afterNode.previousSibling : this.parentNode.lastChild;\n    //   const parent = this.parentNode;\n    //   do {\n    //     after = document.createTextNode('');\n    //     this.parentNode.insertBefore(after, this.afterNode);\n    //     this.iterableParts.push(new NodePart({ before, after, parent }));\n    //     before = after;\n    //   } while (this.iterableParts.length < iterable.length);\n    // } else if (this.iterableParts.length > iterable.length) {\n    //   const nodeToRemove = this.iterableParts[iterable.length].beforeNode.nextSibling;\n    //   moveNodes(this.parentNode, nodeToRemove, this.afterNode);\n    //   this.iterableParts.length = iterable.length;\n    // }\n\n    let index = 0;\n    let before = this.afterNode ? this.afterNode.previousSibling : this.parentNode.lastChild;\n    let after;\n    const parent = this.parentNode;\n    for (const value of iterable) {\n      let part = this.iterableParts[index];\n      if (part === undefined) {\n        after = document.createTextNode('');\n        this.parentNode.insertBefore(after, this.afterNode);\n        part = new NodePart({ before, after, parent });\n        this.iterableParts.push(part);\n        before = after;\n      }\n      part.render(value);\n      index++;\n    }\n    if (index === 0) {\n      moveNodes(this.parentNode, this.beforeNode, this.afterNode);\n    } else if (index < this.iterableParts.length) {\n      const lastPart = this.iterableParts[index - 1];\n      moveNodes(this.parentNode, lastPart.afterNode, this.afterNode);\n    }\n    this.iterableParts.length = index;\n  }\n\n  /**\n   * Render a DOM node in this part\n   */\n  _renderNode(node) {\n    // If we are not already rendering this node\n    if (this.node !== node) {\n      this.clear();\n      this.parentNode.insertBefore(node, this.afterNode);\n      this.node = node;\n    }\n  }\n\n  /**\n   * Render the result of a promise in this part\n   */\n  _renderPromise(promise) {\n    // If the promise is not the last value or promise\n    if (this.value !== promise && this.promise !== promise) {\n      this.clear();\n      this.promise = promise;\n      this.value = promise;\n      // When the promise resolves, render the result of that promise\n      promise.then(value => {\n        // Render the promise result only if the last rendered value was the promise\n        if (this.value === promise) {\n          this.render(value);\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear out the content of this NodePart\n   *\n   * If the current content is part of a DocumentFragment (it is the result of a TemplateResult or an Array)\n   * The current content is moved back into that fragment to be used again if the same fragment is rendered\n   * Otherwise, the current content is removed from the DOM permanently\n   */\n  clear() {\n    moveNodes(this.parentNode, this.beforeNode, this.afterNode, this.node);\n    this.node = emptyNode;\n  }\n}\n\nconst moveNodes = (parent, before, after, target) => {\n  let nodeToRemove;\n  if (before == undefined) {\n    nodeToRemove = parent.firstChild;\n  } else {\n    nodeToRemove = before && before.nextSibling;\n  }\n  if (nodeToRemove !== null) {\n    nodeToRemove = nodeToRemove || parent.firstChild;\n    let remove;\n    let nextNode;\n    if (target instanceof DocumentFragment) {\n      remove = () => target.appendChild(nodeToRemove);\n    } else {\n      remove = () => parent.removeChild(nodeToRemove);\n    }\n\n    while (nodeToRemove != after) {\n      nextNode = nodeToRemove.nextSibling;\n      remove();\n      nodeToRemove = nextNode;\n    }\n  }\n};\n\n// The node in the CommentPart constructor must be a CommentNode\nexport class CommentPart {\n  constructor({ node }) {\n    this.node = node;\n  }\n\n  render(value) {\n    this.node.textContent = value;\n  }\n}\n\nexport class AttributePart {\n  constructor({ node, attribute }) {\n    this.node = node;\n    switch (attribute[0]) {\n      case '.':\n        this.render = this._renderProperty;\n      case '?':\n        this.render = this.render || this._renderBoolean;\n      case '@':\n        this.render = this.render || this._renderEvent;\n        this.node.removeAttribute(attribute);\n        this.name = attribute.slice(1);\n        break;\n      default:\n        this.render = this._renderAttribute;\n        this.name = attribute;\n    }\n  }\n\n  _renderProperty(value) {\n    this.node[this.name] = value;\n  }\n\n  _renderBoolean(boolean) {\n    if (this.value !== !!boolean) {\n      boolean ? this.node.setAttribute(this.name, '') : this.node.removeAttribute(this.name);\n      this.value = boolean;\n    }\n  }\n\n  _renderEvent(listener) {\n    if (this.value !== listener) {\n      this.node.removeEventListener(this.name, this.value);\n      this.node.addEventListener(this.name, listener);\n      this.value = listener;\n    }\n  }\n\n  _renderAttribute(string) {\n    if (string !== this.value) {\n      this.node.setAttribute(this.name, string);\n      this.value = string;\n    }\n  }\n}\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { IEStyleMarker, attributeMarker, commentMarker, nodeMarker, failMarker } from './markers.js';\nimport { AttributePart, CommentPart, NodePart } from './parts.js';\n\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=$/;\nconst filter = [].filter;\n\nexport const findParts = (strings, template) => {\n  let parts = [];\n\n  // Recursive depth-first tree traversal that finds nodes in the subtree of `node` that are parts\n  // The path is an array of incides of childNodes to get to this node\n  const recursiveSearch = (node, path) => {\n    // If the node is a CommentNode, check if it is a marker for a CommentPart or NodePart\n    if (node.nodeType === 8) {\n      if (node.nodeValue === commentMarker) {\n        parts.push({ type: CommentPart, path });\n      } else if (node.nodeValue === nodeMarker) {\n        parts.push({ type: NodePart, path });\n      }\n      // If it is not a marker for a Part, it is a regular comment\n    } else {\n      // If the node is an ElementNode, it may contain AttributeParts\n      if (node.nodeType === 1) {\n        // If the node has the failMarker, the context was incorrectly recognised as a Node context\n        // This happens when an attribute literal contains the '>' character\n        // There is no way to fix this, so throw an error to alert the developer to fix it\n        if (node.hasAttribute(failMarker)) {\n          throw new Error(\"The '>' character is not allowed in attribute literals. Replace with '&gt;'\");\n        }\n        // If the node has any AttributeParts, it will have the attributeMarker attribute set\n        if (node.hasAttribute(attributeMarker)) {\n          node.removeAttribute(attributeMarker);\n\n          // Find the number of dynamic attributes by checking all attribute values against the attributeMarker\n          let dynamicAttributes = filter.call(node.attributes, attribute => attribute.value === attributeMarker).length;\n\n          // If the node has the 'style' attribute, test against IEStyleMarker to check if the attribute is dynamic\n          if (node.getAttribute('style') === IEStyleMarker) {\n            dynamicAttributes += 1;\n          }\n\n          for (let i = 0; i < dynamicAttributes; i++) {\n            // Find the name of this AttributePart using the lastAttributeNameRegex on the string before this part\n            const attribute = lastAttributeNameRegex.exec(strings[parts.length])[1];\n            parts.push({ type: AttributePart, path, attribute });\n          }\n        }\n      }\n\n      // Recursively search all children of this node\n      const children = node.childNodes;\n      const length = children.length;\n      for (let i = 0; i < length; i++) {\n        recursiveSearch(children[i], path.concat([i]));\n      }\n    }\n  };\n\n  // Recursively search the content of the template for parts\n  recursiveSearch(template.content, []);\n\n  // If we found less parts than we should, something went wrong\n  // Most likely a double attribute assignment was dropped by the HTML parser\n  // Throw an error and warn the developer\n  if (parts.length < strings.length - 1) {\n    throw new Error(\"Double attribute assignments are not allowed: '<div a=${0} a=${0}>'\");\n  }\n  return parts;\n};\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { attributeMarker, commentMarker, nodeMarker } from './markers.js';\n\n// The second marker is to add a boolean attribute to the element\n// This is to easily test if a node has dynamic attributes by checking against that attribute\nexport const attributeMarkerTag = `${attributeMarker} ${attributeMarker}`;\n\n// The space at the end is necessary, to avoid accidentally closing comments with `<!-->`\nexport const commentMarkerTag = `--><!--${commentMarker}--><!-- `;\n\n// The extra content at the end is to add a flag to an element when\n// a nodeMarkerTag is inserted as an attribute due to an attribute containing `>`\nexport const nodeMarkerTag = `<!--${nodeMarker}-->`;\n\nexport const attributeContext = Symbol('attributeContext');\nexport const commentContext = Symbol('commentContext');\nexport const nodeContext = Symbol('nodeContext');\nexport const unchangedContext = Symbol('unchangedContext');\n\nconst contextMap = new Map();\ncontextMap.set(attributeContext, attributeMarkerTag);\ncontextMap.set(commentContext, commentMarkerTag);\ncontextMap.set(nodeContext, nodeMarkerTag);\n\nexport const parseContext = string => {\n  const openComment = string.lastIndexOf('<!--');\n  const closeComment = string.indexOf('-->', openComment + 1);\n  const commentClosed = closeComment > -1;\n  let type;\n  if (openComment > -1 && !commentClosed) {\n    type = commentContext;\n  } else {\n    const closeTag = string.lastIndexOf('>');\n    const openTag = string.indexOf('<', closeTag + 1);\n    if (openTag > -1) {\n      type = attributeContext;\n    } else {\n      if (closeTag > -1) {\n        type = nodeContext;\n      } else {\n        type = unchangedContext;\n      }\n    }\n  }\n  return { commentClosed, type };\n};\n\nexport const parseTemplate = strings => {\n  const html = [];\n  const lastStringIndex = strings.length - 1;\n  let currentContext = nodeContext;\n  for (let i = 0; i < lastStringIndex; i++) {\n    const string = strings[i];\n    const context = parseContext(string);\n    if ((currentContext !== commentContext || context.commentClosed) && context.type !== unchangedContext) {\n      currentContext = context.type;\n    }\n    if (currentContext === attributeContext && string.slice(-1) !== '=') {\n      throw new Error('Only bare attribute parts are allowed: `<div a=${0}>`');\n    }\n    html.push(string);\n    html.push(contextMap.get(currentContext));\n  }\n\n  html.push(strings[lastStringIndex]);\n  return html.join('');\n};\n\nexport const buildTemplate = strings => {\n  const template = document.createElement('template');\n  template.innerHTML = parseTemplate(strings);\n  return template;\n};\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { findParts } from './node-walker.js';\nimport { buildTemplate } from './template-parser.js';\nimport { NodePart } from './parts.js';\n/**\n * A map that contains all the template literals we have seen before\n * It maps from a String array to a Template object\n *\n * @typedef {Map.<[String], Template>}\n */\nconst templateMap = new Map();\n\n/**\n * Template holds the DocumentFragment that is to be used as a prototype for instances of this template\n * When a template is to be rendered in a new location, a clone will be made from this\n *\n * @prop {[String]} strings\n *   The unique string array that this template represents\n * @prop {[DocumentFragment]} element\n *   The DocumentFragment that can be cloned to make instances of this template\n * @prop {[Object]} parts\n *   The descriptions of the parts in this Template. Each part has a path which defines a unique location in the\n *   template DOM tree, a type which defines the part type, and an optional attribute which defines the name of\n *   the attribute this part represents.\n */\nexport class Template {\n  constructor(strings) {\n    this.strings = strings;\n    this.element = buildTemplate(strings);\n    this.parts = findParts(strings, this.element);\n  }\n}\n\n/**\n * TemplateResult holds the strings and values that result from a tagged template string literal.\n * TemplateResult can find and return a unique Template object that represents its tagged template string literal.\n */\nexport class TemplateResult {\n  constructor(strings, values) {\n    this.strings = strings;\n    this.values = values;\n    this._template = undefined;\n  }\n\n  /**\n   * @returns {Template}\n   *   A unique Template object..\n   *   Each evaluation of html`..` yields a new TemplateResult object, but they will have the same\n   *   Template object when they are the result of the same html`..` literal.\n   *\n   */\n  get template() {\n    if (this._template) {\n      return this._template;\n    }\n    let template = templateMap.get(this.strings);\n    if (!template) {\n      template = new Template(this.strings);\n      templateMap.set(this.strings, template);\n    }\n    this._template = template;\n    return template;\n  }\n}\n\n/**\n * An instance of a template that can be rendered somewhere\n *\n * @prop {Template} template\n *   The unique Template object that this is an instance of\n * @prop {[DocumentFragment]} fragment\n *   The DocumentFragment that is a clone of the Template's prototype DocumentFragment\n * @prop {[AttributePart|CommentPart|NodePart|]} parts\n *   The parts that render into this template instance\n */\nexport class TemplateInstance {\n  constructor(template, parent, before, after) {\n    this.template = template;\n    this.fragment = template.element.content.cloneNode(true);\n\n    // Create new Parts based on the part definitions set on the Template\n    const parts = this.template.parts.map(part => {\n      let node = this.fragment;\n      part.path.forEach(nodeIndex => {\n        node = node.childNodes[nodeIndex];\n      });\n      part.node = node;\n      if (part.type === NodePart) {\n        if (part.path.length === 1) {\n          part.parent = parent;\n          part.before = node.previousSibling || before;\n          part.after = node.nextSibling || after;\n        } else {\n          part.parent = node.parentNode;\n        }\n      }\n      return part;\n    });\n    this.parts = parts.map(part => new part.type(part));\n  }\n\n  /**\n   * Render values into the parts of this TemplateInstance\n   *\n   * @param {[any]} values\n   *   An array of values to render into the parts. There should be one value per part\n   */\n  render(values) {\n    this.parts.map((part, index) => part.render(values[index]));\n  }\n}\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2018 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { TemplateResult } from './lib/templates.js';\nimport { NodePart } from './lib/parts.js';\n\nexport { noChange } from './lib/parts.js';\n\n/**\n * Tagging function to tag JavaScript template string literals as HTML\n *\n * @return {TemplateResult}\n *   The strings and values of the template string wrapped in a TemplateResult object\n */\nexport const html = (strings, ...values) => {\n  return new TemplateResult(strings, values);\n};\n\n/**\n * Render content into a target node\n *\n * @param {any} content\n *   Any content you wish to render. Usually a template string literal tagged with the `html` function\n * @param {Node} target\n *   An HTML Node that you wish to render the content into.\n *   The content will become the sole content of the target node.\n */\nexport const render = (content, target) => {\n  // Check if the target has a NodePart that represents its content\n  let part = target.__nodePart;\n  if (!part) {\n    // If it does not, create a new NodePart\n    part = new NodePart({ parent: target });\n    target.__nodePart = part;\n  }\n  // Task the NodePart of this target to render the content\n  part.render(content);\n};\n"],"names":["marker","Math","random","toString","slice","padStart","attributeMarker","IEStyleMarker","commentMarker","failMarker","nodeMarker","isSerializable","value","isIterable","nonPrimitive","Array","isArray","Symbol","iterator","noChange","emptyNode","iterableNode","NodePart","[object Object]","node","parent","before","after","this","parentNode","beforeNode","previousSibling","afterNode","nextSibling","clear","_renderText","TemplateResult","_renderTemplateResult","_renderIterable","Node","_renderNode","undefined","then","_renderPromise","String","serializable","nodeType","textContent","document","createTextNode","templateResult","templateInstances","Map","instance","get","template","TemplateInstance","set","fragment","insertBefore","render","values","iterable","iterableParts","length","index","lastChild","part","push","moveNodes","lastPart","promise","target","nodeToRemove","firstChild","remove","nextNode","DocumentFragment","appendChild","removeChild","CommentPart","AttributePart","attribute","_renderProperty","_renderBoolean","_renderEvent","removeAttribute","name","_renderAttribute","boolean","setAttribute","listener","removeEventListener","addEventListener","string","lastAttributeNameRegex","filter","findParts","strings","parts","recursiveSearch","path","nodeValue","type","hasAttribute","Error","dynamicAttributes","call","attributes","getAttribute","i","exec","children","childNodes","concat","content","attributeMarkerTag","commentMarkerTag","nodeMarkerTag","attributeContext","commentContext","nodeContext","unchangedContext","contextMap","parseContext","openComment","lastIndexOf","commentClosed","indexOf","closeTag","parseTemplate","html","lastStringIndex","currentContext","context","join","buildTemplate","createElement","innerHTML","templateMap","Template","element","_template","cloneNode","map","forEach","nodeIndex","__nodePart"],"mappings":"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"}